generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  name          String?
  age           Int?
  weight        Float?
  height        Float?
  activityLevel String?
  goal          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Add the meals relation
  meals         Meal[]
  nutritionGoals NutritionGoal[]
  healthMetrics HealthMetric[]
  sessions      Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model Meal {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  imageUrl    String?
  calories    Float
  protein     Float
  carbs       Float
  fat         Float
  fiber       Float?
  sugar       Float?
  sodium      Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Add the user relation
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  foodItems   FoodItem[]

  @@map("meals")
}

model FoodItem {
  id       String @id @default(cuid())
  mealId   String

  name     String
  quantity String
  calories Int
  protein  Float
  carbs    Float
  fat      Float
  fiber    Float?
  sugar    Float?

  // Relationships
  meal     Meal   @relation(fields: [mealId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("food_items")
}

model NutritionGoal {
  id             String @id @default(cuid())
  userId         String

  dailyCalories  Int
  dailyProtein   Float
  dailyCarbs     Float
  dailyFat       Float
  dailyFiber     Float?
  dailySugar     Float?

  isActive       Boolean @default(true)

  // Relationships
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("nutrition_goals")
}

model HealthMetric {
  id         String     @id @default(cuid())
  userId     String

  metricType MetricType
  value      Float
  unit       String
  recordedAt DateTime   @default(now())
  source     String?    // e.g., "manual", "apple_watch", "fitbit", "supabase"

  // Relationships
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("health_metrics")
}

enum UserRole {
  USER
  ADMIN
  NUTRITIONIST
  FREE
  PREMIUM
}

enum ActivityLevel {
  SEDENTARY
  LIGHT
  MODERATE
  ACTIVE
  VERY_ACTIVE
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
  OTHER
}

enum MetricType {
  WEIGHT
  BODY_FAT
  MUSCLE_MASS
  WATER_INTAKE
  SLEEP_HOURS
  STEPS
  HEART_RATE
  BLOOD_PRESSURE
}