// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  email    String   @unique
  username String   @unique
  name     String
  password String
  role     UserRole @default(USER)

  // Profile information
  dateOfBirth   DateTime?
  height        Float? // in cm
  weight        Float? // in kg
  activityLevel ActivityLevel @default(MODERATE)
  dietaryGoals  String?
  allergies     String[]

  // Smart watch connection
  smartWatchConnected Boolean   @default(false)
  smartWatchType      String?
  lastSyncAt          DateTime?

  // Relationships
  meals          Meal[]
  nutritionGoals NutritionGoal[]
  healthMetrics  HealthMetric[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Meal {
  id          String  @id @default(cuid())
  userId      String
  imageUrl    String? // Firebase Storage URL
  imageBase64 String? // Temporary base64 storage

  // AI Analysis Results
  description     String
  totalCalories   Int
  totalProtein    Float
  totalCarbs      Float
  totalFat        Float
  totalFiber      Float?
  totalSugar      Float?
  healthScore     Int // 1-10
  recommendations String?

  // Meal metadata
  mealType   MealType @default(OTHER)
  consumedAt DateTime @default(now())

  // Relationships
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  foodItems FoodItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("meals")
}

model FoodItem {
  id     String @id @default(cuid())
  mealId String

  name     String
  quantity String
  calories Int
  protein  Float
  carbs    Float
  fat      Float
  fiber    Float?
  sugar    Float?

  // Relationships
  meal Meal @relation(fields: [mealId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("food_items")
}

model NutritionGoal {
  id     String @id @default(cuid())
  userId String

  dailyCalories Int
  dailyProtein  Float
  dailyCarbs    Float
  dailyFat      Float
  dailyFiber    Float?
  dailySugar    Float?

  isActive Boolean @default(true)

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("nutrition_goals")
}

model HealthMetric {
  id     String @id @default(cuid())
  userId String

  metricType MetricType
  value      Float
  unit       String
  recordedAt DateTime   @default(now())
  source     String? // e.g., "manual", "apple_watch", "fitbit"

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("health_metrics")
}

enum UserRole {
  USER
  ADMIN
  NUTRITIONIST
}

enum ActivityLevel {
  SEDENTARY
  LIGHT
  MODERATE
  ACTIVE
  VERY_ACTIVE
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
  OTHER
}

enum MetricType {
  WEIGHT
  BODY_FAT
  MUSCLE_MASS
  WATER_INTAKE
  SLEEP_HOURS
  STEPS
  HEART_RATE
  BLOOD_PRESSURE
}
